// browser command line interface using same library

// this example uses some html selectors but honestly it would be arbitrary to use console.log for output, etc


// set terminal buffer size to a reasonable number
var DEF_TERM_SIZE = 2000;

var Convert = require('ansi-to-html');
var convert = new Convert({stream:true});

var hterm = require('hterm');
global.hterm = window.hterm = hterm;
var lib = require('lib');
global.lib = window.lib =  lib;

hterm.defaultStorage = new lib.Storage.Local();

module.exports = function(opts){
  
  var el = document.querySelector('#terminal');
    
  var t = new hterm.Terminal();  
  t.decorate(el);
  
  var io;
  
  var outStream = {
    write:function(){}
  }
  
  t.onTerminalReady = function(){
    
    var io = t.io.push();
    
    t.onVTKeystroke = function(str) {
      // Do something useful with str here.
      // For example, Secure Shell forwards the string onto the NaCl plugin.
      console.log(str);
      inStream.write(str);
    };

    t.sendString = function(str) {
      // Just like a keystroke, except str was generated by the
      // terminal itself.
      // Most likely you'll do the same this as onVTKeystroke.
      console.log(str);
      inStream.write(str);
    };
    
    console.log(io);
    
    io.sendString = io.onVTKeystroke = function send(str) {
      console.log(str);
      inStream.write(str);
    };
    
    outStream.write = function(s){
      t.io.print(s.replace(/\n/igm,'\n\r'));
    }
    
    // THIS
    t.installKeyboard();
    
    cli.ready();
            
  }
  
  var inStream = {
    //lala
  }
  
  var cli = require('./all-cli-simple')(inStream,outStream);
    
  return cli;
}